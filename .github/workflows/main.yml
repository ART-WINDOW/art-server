name: Spring Boot Azure Deployment

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 21
      uses: actions/setup-java@v2
      with:
        java-version: 21
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Build Docker Image
      run: docker build -t art-server .

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    - name: Push Docker Image to Docker Hub
      run: |
        docker tag art-server ${{ secrets.DOCKER_HUB_USERNAME }}/art-server:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/art-server:latest

    - name: SSH to Azure VM and deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AZURE_VM_IP }}
        username: ${{ secrets.AZURE_VM_USERNAME }}
        key: ${{ secrets.AZURE_VM_SSH_KEY }}
        script: |
          # 기존 컨테이너 정지 및 제거
          sudo docker stop art-server || true
          sudo docker rm art-server || true

          # Docker Hub에서 최신 이미지 가져오기
          sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/art-server:latest

           # 사용하지 않는 이전 이미지 정리
          sudo docker image prune -f

          # 컨테이너 실행
          sudo docker run -d -p 8080:8080 \
            --name art-server \
            --restart unless-stopped \
            -e DB_URL=${{ secrets.DB_URL }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e GYEONGGI_API_KEY=${{ secrets.GYEONGGI_API_KEY }} \
            -e GONGGONG_API_KEY=${{ secrets.GONGGONG_API_KEY }} \
            -e GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} \
            -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
            ${{ secrets.DOCKER_HUB_USERNAME }}/art-server:latest
